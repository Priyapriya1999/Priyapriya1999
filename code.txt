import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import seaborn
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
import tensorflow as tf
data1=pd.read_csv("C:\\Users\\User\Downloads\\placementdata.csv")
data1.head()
print(data1)
le=LabelEncoder()
label = le.fit_transform(data1['RegNo.'])
label
data1.drop("RegNo.", axis=1, inplace=True)
data1['RegNo.']=label
print(data1)
correlation = data1. corr ()  
seaborn. heatmap (correlation) 
#knn
X=data1.drop("Placed",axis=1)
y=data1['Placed']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)
KNeighborsClassifier()
param_grid = {'n_neighbors':np.arange(1,20),'metric':['euclidean','manhattan']}
grid=GridSearchCV(KNeighborsClassifier(),param_grid,cv=5)
grid.fit(X_train,y_train)
grid.best_score_
grid.best_params_
model=grid.best_estimator_
out=model.score(X_test,y_test)
print(out)
#nn
ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
ann.add(tf.keras.layers.Dense(units=1,activation="sigmoid"))
ann.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy'])
nn=ann.fit(X_train,y_train,batch_size=32,epochs = 600)
nn.history
ans=np.mean(nn.history['accuracy'])
print(ans)



